#GUIDE
*Prerequisite function you will have to create for yourself before using this library.
	1. Function to control the upper and lower link motors for your quadruped.
		a) This will be two seperate functions(one for upper actuators one for lower) each having two parameters.
			1.The index(refer configurations.png) of the leg you want to move.
			2.Angle in degrees.
		b) The direction of the rotation can either be handled in this functions itself or can also be handled in the library.
		c) The offsets for precise 
	2. A Delay function, this function should take argument in microseconds. This will decide the speed of your quadruped.This means each loop when the program runs will add a delay of that many microseconds in your program.

*Refer configurations.png to choose choose your configuration of legs and select proper parameters accordingly.

To begin create an object of class TVquad,this object will be your quadruped all function calls will be made from this object.

functions provided by this library.
	
void setConfiguration(int,int)
	-refer configurations.png for configuration parameters

void setUpperMotorf(void (*fn_controlling_upper_motors)(int leg,int angle))
	-To point to your fn. for controlling upper actuators.

void setLowerMotorf(void (*fn_controlling_lower_motors)(int leg,int angle))
	-To point to your fn. for controlling lower actuators.

void setPoints(double[72][2])
	-Takes 72 points 0->x 1->y if you want to provide custom trajectory *each point should have refers 5 phases from(0 to 360)*.
	-The effects of this function will nullify if you call any inbuilt preconfigured walking functions.
	-Function setPhaseDiff(int,int,int,int)	needs to be called after this to adjuset the phase difference according to your trajectory

void setPhaseDiff(int,int,int,int)
	-Takes 4 parameters as phase differance for four legs can take values form 0 to 355

void getAngles(int)
	-takes argument as the index of leg you want to calculate angle for, give 4 as argument if you want to calculate angles for all legs.
	-If you change values for only one leg there is no need to calculate angles for all 4 legs, this will also speed up the process.
	-Call this function after making changes to trajectory before making the quadruped run again to see visible changes.
	-You can make multiple changes to the trajectory before calling this functions but the heirarchy of those functions need to be followed.

void GoToPhase(int leg,int phase)
	-To give a custom phase angle to a leg can be used for debugging or creating custom gait

void writeUpperA(int leg, int angle)
	-To give angle to upper actuator.
	-First parameter is the index of leg and 2nd is the angle 

void writeLowerA(int  leg,int angle)
	-To give angle to lower actuator
	-parameters same as writeUpperA()

void initial()
	-Sets the quadruped in initial standing position by making all 4 legs get to phase 0,0,0,0

void alternateWalkMode()
	-Adjusts all parameters of the quadruped to walk in inbuilt alternate mode with inbuilt trajectory
	-This function will adjust delay, points, phase differances and height and length multipliers.

void staticGait()
	-Adjust all parameters of the quadruped to walk in inbuilt static gait with inbuilt trajectory
	-This function will adjust delay, points, phase differances and height and length multipliers.

void test()	
	-Sets all angles to 90
	-will help you adjust offset and direction using setDirection() and setOffsets()

void RUN(int)
	-This function is used to make the quadruped walk.
	-takes 1 or 0 as parameter 1 will make it run and increment by one phase and 0 will stop it.
	-If you make any modifications to the trajectory call getAngle() function before calling this for the first time.
	-Needs to be called continuesly to make the quadruped walk.

void writeUM(int leg,int angle)
	-To directly write an "angle" in degrees to the upper actuator of "leg" with adjusted direction and offset

void writeDM(int leg,int angle)
	-To directly write an "angle" in degrees to the lower actuator of "leg" with adjusted direction and offset
 
void left()
	-Adjust trajectory to slightly turn left.

void right()
	-Adjust trajectory to slightly turn right.

void rightEx()
	-To take extreme right turn.

void LeftEx()
	-To take extreme left turn.

void straight()
	-To adjust trajectory to walk straight.

void setDirection(int[8])
	-Direction is either 1 or -1
	-To set proper direction to leg movement.
	-refer configurations.png for better understanding.
	-first 4 are for upper actuators and later 4 for lower actuators.

void setOffsets(int[8])
	-To set proper offsets for legs, if any.
	-first 4 are for upper actuators and later 4 for lower actuators.

*Leg height and length multipliers: these help you to scale the trajectories your leg follows
void setHeightMul(int leg,double mul)
	-To set height multipliers for each leg.
	-This will scale the height of trajectory of the "leg" by "mul".

void setLengthMul(int leg,double mul)
	-To set length multipliers for each leg.
	-This will scale the length of trajectory of the "leg" by "mul".

void setLengthMul(int leg,double mul)
	-Set Elbow position for each leg.
	-Giving 4 as parameter for leg will set the same point for all four legs.
	-Basic elbow position can be (0,(the height you want the elbow to be form ground)).

void setLinkLength(int upper,int lower)
	-Sets upper and lower link link lengths
	-Call this function before any function or else trajectory will not be adjusted

int currentPhase()
	-Returns the current basePhase angle the quadruped is running at.
	-Useful for calculating the number of steps.

void setDelay(int)
	-Sets delay for each phase in microseconds

void setDelayf(void (*system_Delay)(int microseconds))
	-Takes your systems delay functions which will take dealy in microseconds

void setSlope(int slope)
	-tilts the trajectory of motion of leg by slope degrees to walk over slopes.
	-also use rotation of the whole chassises with it to make this effective.

void setRotation(int rot)
	-rotates the axis of legs by rot degrees

